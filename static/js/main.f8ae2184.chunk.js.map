{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/user.ts","components/PostForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","completed","title","id","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","onSubmit","useState","setTitle","hasTitleErrors","setHasTitleErrors","setUserId","hasUserIdErrors","setHasUserIdErrors","action","method","event","preventDefault","type","placeholder","value","onChange","target","disabled","initialTodos","getNewTodoId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8ae2184.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    completed, title, user, id,\n  } = todo;\n\n  return (\n    <article\n      className={`TodoInfo ${\n        completed ? 'TodoInfo--completed' : ''\n      }`}\n      data-id={id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {!!user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\nimport { User } from '../types/User';\n\nexport function getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n","import React, { useState } from 'react';\nimport usersFromServer from '../../api/users';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleErrors, setHasTitleErrors] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdErrors, setHasUserIdErrors] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleErrors(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdErrors(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleErrors(!title);\n    setHasUserIdErrors(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n\n        {hasTitleErrors && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {usersFromServer.map((user: User) => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdErrors && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { getUserById } from './services/user';\nimport { Todo } from './types/Todo';\nimport { TodoForm } from './components/PostForm/TodoForm';\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => (\n  {\n    ...todo,\n    user: getUserById(todo.userId),\n  }\n));\n\nfunction getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}